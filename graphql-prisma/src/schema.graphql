type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments(query: String): [Comment!]!
  me: User!
  post: Post!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  deleteUser(user: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  createPost(data: CreatePostInput!): Post!
  deletePost(post: ID!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(comment: ID!): Comment!
  updateComment(id: ID!, text: String!): Comment!
}

type Subscription {
  comment(postId: ID!): commentSubscriptionPayload!
  post: postSubscriptionPayload!
}

type AuthPayload {
  token: String!,
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}

input UpdatePostInput{
  title: String,
  body: String,
  published: Boolean
}

input CreateCommentInput {
  text: String!
  author: ID!
  post: ID!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

enum MutationType{
  CREATED,
  UPDATED,
  DELETED
}

type postSubscriptionPayload {
  mutation: MutationType!
  node: Post
}

type commentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}